// 모듈 적용
var mysql = require('mysql');
var express = require('express');
var app = express();
var fs = require('fs');

app.use(express.json());
app.use(express.urlencoded({extended: true}));

// 파일 업로드를 위해 multer 모듈 적용
var multer = require('multer');
const { endianness } = require('os');

// server IP & port number
const hostname = "192.249.19.242";
const port = 80;

app.listen(80, function () {
    console.log('서버 실행 중... ' + hostname);
});

// 파일의 저장경로 & 파일명 처리하기 위해
// DiskStorage 엔진이 필요. 
var storage = multer.diskStorage({
    // cb(콜백)함수를 통해 전송된 file 저장 디렉토리 설정
    destination: (req, file, cb) => {
        cb(null, 'photo/')
    },
    // cb(콜백)함수를 통해 전송된 file 이름 설정
    filename: (req, file, cb) => {
        cb(null, file.originalname)
    }
});
var upload = multer({ storage: storage});

var connection = mysql.createConnection({
    host: "localhost",
    user: "root",
    database: "project2",
    password: ""
});

app.post('/user/join', function (req, res) {
    console.log(req.body);
    var userEmail = req.body.userEmail;
    var userPwd = req.body.userPwd;
    var userName = req.body.userName;

    // 삽입을 수행하는 sql문.
    var sql = 'INSERT INTO Users (userEmail, userPwd, userName) VALUES (?, ?, ?)';
    var params = [userEmail, userPwd, userName];
    connection.connect();
   console.log('test1 ');
    // sql 문의 ?는 두번째 매개변수로 넘겨진 params의 값으로 치환된다.
    connection.query(sql, params, function (err, result, field) {
        var resultCode = 404;
        var message = '에러가 발생했습니다';
   console.log('test 2');
        if (err) {
            console.log('에러: ', err);
        } else {
            resultCode = 200;
            message = '회원가입에 성공했습니다.';
       console.log('잘됨: '+result[0]);
        }

        res.json({
            'code': resultCode,
            'message': message
        });
    });
});

app.post('/user/login', function (req, res) {
    var userEmail = req.body.userEmail;
    var userPwd = req.body.userPwd;
    var sql = 'select * from Users where userEmail = ?';

    connection.query(sql, userEmail, function (err, result) {
        var resultCode = 404;
        var message = '에러가 발생했습니다';

        if (err) {
            console.log(err);
        } else {
            if (result.length === 0) {
                resultCode = 204;
                message = '존재하지 않는 계정입니다!';
            } else if (userPwd !== result[0].userPwd) {
                resultCode = 204;
                message = '비밀번호가 틀렸습니다!';
            } else {
                resultCode = 200;
                message = '로그인 성공! ' + result[0].userName + '님 환영합니다!';
            }
        }

        res.json({
            'code': resultCode,
            'message': message
        });
    });
});

app.post('/phone/upload', function (req, res) {
    console.log(req.body);
    var phoneName = req.body.phoneName;
    var phoneNumber = req.body.phoneNumber;

    // 삽입을 수행하는 sql문.
    var sql = 'INSERT INTO phone VALUES (?, ?)';
    var params = [phoneName, phoneNumber];
    connection.connect();
   console.log('test1 ');
    // sql 문의 ?는 두번째 매개변수로 넘겨진 params의 값으로 치환된다.
    connection.query(sql, params, function (err, result, field) {
        var resultCode = 404;
        var message = '에러가 발생했습니다';
   console.log('test 2');
        if (err) {
            console.log('에러: ', err);
        } else {
            resultCode = 200;
            message = '회원가입에 성공했습니다.';
       console.log('잘됨: '+result[0]);
        }

        res.json({
            'code': resultCode,
            'message': message
        });
    });
});

app.post('/phone', function (req, res) {
   var name = 'null';
   var number = '01012345678';
   var sql = 'select NAME, NUMBER from phone';

   connection.query(sql, function (err, result) {
      var resultCode = 404;
      var message = '에러가 발생했습니다';

      if(err){
         console.log(err);
      }else{
         console.log('잘됨');
         name = result[0].NAME;
         number = result[1].NUMBER;

      }

      res.json({
         'name': name,
         'number': number
      });
   });
});

// 앱 -> 서버 이미지 업로드
app.post('/upload', upload.single('ham1'), function(req, res, next) {

    var sql = "INSERT INTO photo VALUES (?, ?)";
    var value = [req.file.originalname, req.file.path]
  
    connection.query(sql, value, (err, rows, fields) => {
      if(err) {
        console.log(req.file.originalname,': there is a same file...');
      } else {
        console.log(req.file.originalname, ': upload complete!');
      }
    });
  
    res.json({
      success: Boolean(true),
      message: "good job :)"
    });
  });

  app.post('/download', function(req, res, next) {

    var sql = "SELECT * FROM photo";
  
    connection.query(sql, (err, rows, fields) => {
      if(err) {
        console.log('mysql error...')
  
      } else {
        var nameArray = new Array()
        var pathArray = new Array()
        const num = rows.length
        console.log(num)
  
        for(var i=0; i<num; i++) {
            nameArray[i] = rows[i].name
            pathArray[i] = rows[i].path
        }
  
        res.json({
          name: nameArray,
          path: pathArray
        });
        console.log(nameArray);
        res.end();
      }
    });
  });

  app.post('/delete', function (req, res, next) {
    console.log(req.body);
  
    const name = req.body.fileName
    const path = req.body.filePath
    var sql = "DELETE FROM photo WHERE path = ?";
  
    var success = Boolean(true)
    var message = "delete complete"
  
    fs.unlink(path, (err) => {
      if(err) {
        success = Boolean(false)
        message = err
        console.log(err)
  
      } else {
        console.log('file delete!')
    
        connection.query(sql, path, (err, rows, fields) => {
          if(err) {
            success = Boolean(false)
            message = err
            console.log(err)
          } else {
            console.log('delete in mysql')
          }
        });
      }
    });
  
    res.json({
      success: success,
      message: message
    })
  });

  app.use('/users', express.static('photo/'));