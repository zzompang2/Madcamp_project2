// 모듈 선언
var http = require('http');
var fs = require('fs');
var express = require('express');
var app = express();
const mysql = require("mysql");

// server IP & port number
const hostname = "192.249.19.242";
const port = 80;

// 파일 업로드를 위해 multer 모듈 적용
var multer = require('multer');
const { endianness } = require('os');

// 파일의 저장경로 & 파일명 처리하기 위해
// DiskStorage 엔진이 필요. 
var storage = multer.diskStorage({
  // cb(콜백)함수를 통해 전송된 file 저장 디렉토리 설정
  destination: (req, file, cb) => {
    cb(null, 'uploads/')
  },
  // cb(콜백)함수를 통해 전송된 file 이름 설정
  filename: (req, file, cb) => {
    cb(null, file.originalname)
  }
})
var upload = multer({ storage: storage})


// mysql 연결
const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'proj2'
});

app.listen(port, () => {
  console.log('Server Running at '+hostname);
});

// 폼데이터 또는 폼태그를 이용해 이미지 올리면
// req.file 으로 정보가 들어와 destination 속성에 지정해둔 경로에 이미지가 저장
// 이미지 아닌 다른 데이터는 그대로 req.body 에 들어옴

// 미들웨어 upload.single("ham1")는 function 실행 전에 먼저 실행됨.
// 미들웨어는 사용자가 전송한 데이터 중에서 만약 파일이 포함되어 있다면,
// 그 파일을 가공해서 req객체에 file 이라는 프로퍼티를 암시적으로 추가도록 약속되어 있는 함수.
// 그 안의 매개변수 "ham1" 부분에는 form을 통해 전송되는 파일의 name 속성을 가져야 함.

app.post('/upload', upload.single('ham1'), function(req, res, next) {

  var sql = "INSERT INTO uploads VALUES (?, ?)";
  var value = [req.file.originalname, req.file.path]

  connection.query(sql, value, (err, rows, fields) => {
    if(err) {
      console.log(req.file.originalname,': there is a same file...')
    } else {
      console.log(req.file.originalname, ': upload complete!')
    }
  });

  res.json({
    success: Boolean(true),
    message: "good job :)"
  })
})

app.post('/download', function(req, res) {

  var sql = "SELECT * FROM uploads";
  // var result = new Array();

  // connection.query(sql, (err, rows, fields) => {
  //   if(err) {
  //     console.log('SQL error')
  //   } else {
  //     console.log(rows)
  //     const num = rows.length
  //     var j=0
  //     for(var i=0; i<num; i++) {
  //       fs.readFile(rows[j].path, 'base64', (err, data) => {
  //         result[j] = {name: rows[j].name, img: data}
  //         j++
  //       })
  //     }
  //     console.log(result)
  //     res.json(result)
  //     res.end()
  //   }
  // })


  var nameArray = new Array();
  var imgArray = new Array();

  connection.query(sql, (err, rows, fields) => {
    if(err) {
      console.log('SQL error')
    } else {
      console.log(rows)
      const num = rows.length
      console.log(num)

      var j = 0;
      for(var i=0; i<num; i++) {
        fs.readFile(rows[j].path, 'base64', (err, data) => {
          nameArray[j] = rows[j].name
          imgArray[j] = data
          j++
          if(j == num) {
            console.log(nameArray)
            res.json({ name: nameArray, img: imgArray }) 
            res.end()
          }
        })
      }
    }
  })

  // fs.readFile('./uploads/1594779081800.jpg', 'base64', (err, data) => {
  //   res.json({ name: '1594779081800.jpg', img: data })
  //   res.end()
  // })
})